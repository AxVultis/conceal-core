name: Build check

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*" # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    env:
      BOOST_ROOT: C:/hostedtoolcache/windows/Boost/1.72.0/x86_64
    steps:
      - uses: actions/checkout@master

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install Boost
        shell: powershell
        run: |
          echo "${env:BOOST_ROOT}"
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.72.0/boost_1_72_0-msvc-14.2-64.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
          Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=${env:BOOST_ROOT}"

      - name: Build
        shell: powershell
        id: build
        run: |
          choco install hyperfine
          $sha = "${{ github.sha }}"
          $ccx_ver = $sha.SubString(0,7)
          $release_name = "ccx-cli-win64-v$ccx_ver"
          hyperfine --parameter-list build_type "",Release,Debug --parameter-list num_thread 2 "build.bat  {build_type} {num_thread}" --export-json results/benchmark.json --export-markdown results/benchmark.md
          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=artifact_path::results"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu16:
    name: Ubuntu 16.04
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          sudo apt-get install cargo
          cargo install hyperfine
          export PATH=~/.cargo/bin:$PATH

          ccx_ver=${GITHUB_SHA::7}
          ccx_ver_folder=$(echo $ccx_ver | sed 's/\.//g')
          release_name=ccx-cli-ubuntu-1604-dev"$ccx_ver"

          hyperfine --parameter-list build_type "",Release,Debug --parameter-list num_thread 2 "./build.sh  {build_type} {num_thread}" --export-json results/benchmark.json --export-markdown results/benchmark.md

          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=artifact_path::results"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu18:
    name: Ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          sudo apt-get install cargo
          cargo install hyperfine
          export PATH=~/.cargo/bin:$PATH

          ccx_ver=${GITHUB_SHA::7}
          ccx_ver_folder=$(echo $ccx_ver | sed 's/\.//g')
          release_name=ccx-cli-ubuntu-1804-dev"$ccx_ver"

          hyperfine --parameter-list build_type "",Release,Debug --parameter-list num_thread 2 "./build.sh  {build_type} {num_thread}" --export-json results/benchmark.json --export-markdown results/benchmark.md

          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=artifact_path::results"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          sudo apt-get install cargo
          cargo install hyperfine
          export PATH=~/.cargo/bin:$PATH

          ccx_ver=${GITHUB_SHA::7}
          ccx_ver_folder=$(echo $ccx_ver | sed 's/\.//g')
          release_name=ccx-cli-ubuntu-2004-dev"$ccx_ver"

          hyperfine --parameter-list build_type "",Release,Debug --parameter-list num_thread 2 "./build.sh  {build_type} {num_thread}" --export-json results/benchmark.json --export-markdown results/benchmark.md

          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=artifact_path::results"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          brew install gcc boost hyperfine
          cargo install hyperfine

          ccx_ver=${GITHUB_SHA::7}
          ccx_ver_folder=$(echo $ccx_ver | sed 's/\.//g')
          release_name=ccx-cli-ubuntu-2004-dev"$ccx_ver"

          hyperfine --parameter-list build_type Release --parameter-list num_thread 4,3,2,1 "./build.sh  {build_type} {num_thread}" --export-json results/benchmark.json --export-markdown results/benchmark.md

          echo "::set-output name=release_name::${release_name}.zip"
          echo "::set-output name=artifact_path::results"

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
